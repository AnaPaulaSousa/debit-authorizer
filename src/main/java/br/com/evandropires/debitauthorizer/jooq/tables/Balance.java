/*
 * This file is generated by jOOQ.
 */
package br.com.evandropires.debitauthorizer.jooq.tables;


import br.com.evandropires.debitauthorizer.jooq.Indexes;
import br.com.evandropires.debitauthorizer.jooq.Keys;
import br.com.evandropires.debitauthorizer.jooq.Public;
import br.com.evandropires.debitauthorizer.jooq.tables.records.BalanceRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Balance extends TableImpl<BalanceRecord> {

    private static final long serialVersionUID = -1427946186;

    /**
     * The reference instance of <code>public.balance</code>
     */
    public static final Balance BALANCE = new Balance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BalanceRecord> getRecordType() {
        return BalanceRecord.class;
    }

    /**
     * The column <code>public.balance.agency</code>.
     */
    public final TableField<BalanceRecord, Integer> AGENCY = createField("agency", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.balance.accountnumber</code>.
     */
    public final TableField<BalanceRecord, Integer> ACCOUNTNUMBER = createField("accountnumber", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.balance.balancevalue</code>.
     */
    public final TableField<BalanceRecord, BigDecimal> BALANCEVALUE = createField("balancevalue", org.jooq.impl.SQLDataType.NUMERIC(15, 2), this, "");

    /**
     * Create a <code>public.balance</code> table reference
     */
    public Balance() {
        this(DSL.name("balance"), null);
    }

    /**
     * Create an aliased <code>public.balance</code> table reference
     */
    public Balance(String alias) {
        this(DSL.name(alias), BALANCE);
    }

    /**
     * Create an aliased <code>public.balance</code> table reference
     */
    public Balance(Name alias) {
        this(alias, BALANCE);
    }

    private Balance(Name alias, Table<BalanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Balance(Name alias, Table<BalanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Balance(Table<O> child, ForeignKey<O, BalanceRecord> key) {
        super(child, key, BALANCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BALANCE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BalanceRecord> getPrimaryKey() {
        return Keys.BALANCE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BalanceRecord>> getKeys() {
        return Arrays.<UniqueKey<BalanceRecord>>asList(Keys.BALANCE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Balance as(String alias) {
        return new Balance(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Balance as(Name alias) {
        return new Balance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Balance rename(String name) {
        return new Balance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Balance rename(Name name) {
        return new Balance(name, null);
    }
}

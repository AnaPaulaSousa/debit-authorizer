/*
 * This file is generated by jOOQ.
 */
package br.com.evandropires.debitauthorizer.jooq;


import br.com.evandropires.debitauthorizer.jooq.tables.Account;
import br.com.evandropires.debitauthorizer.jooq.tables.Balance;
import br.com.evandropires.debitauthorizer.jooq.tables.Debitcard;
import br.com.evandropires.debitauthorizer.jooq.tables.Provisionaldebit;
import br.com.evandropires.debitauthorizer.jooq.tables.Transaction;
import br.com.evandropires.debitauthorizer.jooq.tables.records.AccountRecord;
import br.com.evandropires.debitauthorizer.jooq.tables.records.BalanceRecord;
import br.com.evandropires.debitauthorizer.jooq.tables.records.DebitcardRecord;
import br.com.evandropires.debitauthorizer.jooq.tables.records.ProvisionaldebitRecord;
import br.com.evandropires.debitauthorizer.jooq.tables.records.TransactionRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<ProvisionaldebitRecord, Integer> IDENTITY_PROVISIONALDEBIT = Identities0.IDENTITY_PROVISIONALDEBIT;
    public static final Identity<TransactionRecord, Integer> IDENTITY_TRANSACTION = Identities0.IDENTITY_TRANSACTION;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PK = UniqueKeys0.ACCOUNT_PK;
    public static final UniqueKey<BalanceRecord> BALANCE_PK = UniqueKeys0.BALANCE_PK;
    public static final UniqueKey<DebitcardRecord> DEBITCARD_PKEY = UniqueKeys0.DEBITCARD_PKEY;
    public static final UniqueKey<ProvisionaldebitRecord> PROVISIONALDEBIT_PKEY = UniqueKeys0.PROVISIONALDEBIT_PKEY;
    public static final UniqueKey<TransactionRecord> TRANSACTION_PKEY = UniqueKeys0.TRANSACTION_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<ProvisionaldebitRecord, Integer> IDENTITY_PROVISIONALDEBIT = Internal.createIdentity(Provisionaldebit.PROVISIONALDEBIT, Provisionaldebit.PROVISIONALDEBIT.ID);
        public static Identity<TransactionRecord, Integer> IDENTITY_TRANSACTION = Internal.createIdentity(Transaction.TRANSACTION, Transaction.TRANSACTION.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AccountRecord> ACCOUNT_PK = Internal.createUniqueKey(Account.ACCOUNT, "account_pk", Account.ACCOUNT.AGENCY, Account.ACCOUNT.ACCOUNTNUMBER);
        public static final UniqueKey<BalanceRecord> BALANCE_PK = Internal.createUniqueKey(Balance.BALANCE, "balance_pk", Balance.BALANCE.AGENCY, Balance.BALANCE.ACCOUNTNUMBER);
        public static final UniqueKey<DebitcardRecord> DEBITCARD_PKEY = Internal.createUniqueKey(Debitcard.DEBITCARD, "debitcard_pkey", Debitcard.DEBITCARD.CARDNUMBER);
        public static final UniqueKey<ProvisionaldebitRecord> PROVISIONALDEBIT_PKEY = Internal.createUniqueKey(Provisionaldebit.PROVISIONALDEBIT, "provisionaldebit_pkey", Provisionaldebit.PROVISIONALDEBIT.ID);
        public static final UniqueKey<TransactionRecord> TRANSACTION_PKEY = Internal.createUniqueKey(Transaction.TRANSACTION, "transaction_pkey", Transaction.TRANSACTION.ID);
    }
}
